{"version":3,"sources":["redux/searchField/searchField.types.js","redux/searchField/searchField.reducer.js","redux/requestRobots/requestRobots.types.js","redux/requestRobots/requestRobots.reducer.js","redux/root-reducer.js","redux/store.js","redux/requestRobots/requestRobots.actions.js","redux/searchField/searchField.selectors.js","redux/requestRobots/requestRobots.selectors.js","components/Card.js","components/CardList.js","components/Searchbox.js","redux/searchField/searchField.actions.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["searchFieldActionTypes","INITIAL_STATE","searchField","requestRobotsActionTypes","isPending","robotsData","errorMessage","undefined","rootReducer","combineReducers","search","state","action","type","payload","robots","middleWares","logger","thunk","store","createStore","applyMiddleware","requestRobotsData","dispatch","fetch","then","response","json","data","robotsSuccess","catch","error","message","selectSearchField","createSelector","selectRobots","selectRobotsPending","selectRobotsSuccess","Card","id","name","email","className","alt","src","CardList","map","user","i","key","connect","onSearchChange","event","text","target","value","placeholder","onChange","Scroll","props","children","ErrorBoundary","hasError","info","this","setState","Component","App","onRequestRobots","filteredRobots","filter","robot","toLowerCase","includes","mapStateToProps","createStructuredSelector","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2b478683.chunk.js","sourcesContent":["export const searchFieldActionTypes = {\r\n    CHANGE_SEARCH_FIELD : 'CHANGE_SEARCH_FIELD'\r\n}","import { searchFieldActionTypes } from './searchField.types';\r\n\r\nconst INITIAL_STATE = {\r\n    searchField: ''\r\n};\r\n\r\nexport const searchFieldReducer = (state = INITIAL_STATE, action) => {\r\n    switch(action.type) {\r\n        case searchFieldActionTypes.CHANGE_SEARCH_FIELD:\r\n            return {\r\n                ...state,\r\n                searchField : action.payload\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}","export const requestRobotsActionTypes = {\r\n    REQUEST_ROBOTS_PENDING: 'REQUEST_ROBOTS_PENDING',\r\n    REQUEST_ROBOTS_SUCCESS: 'REQUEST_ROBOTS_SUCCESS',\r\n    REQUEST_ROBOTS_FAILED: 'REQUEST_ROBOTS_FAILED'\r\n}","import { requestRobotsActionTypes } from './requestRobots.types';\r\n\r\nconst INITIAL_STATE = {\r\n    isPending: false,\r\n    robotsData: [],\r\n    errorMessage: undefined\r\n};\r\n\r\nexport const robotsReducer = (state=INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case requestRobotsActionTypes.REQUEST_ROBOTS_PENDING:\r\n            return {\r\n                ...state,\r\n                isPending: true\r\n            }\r\n        case requestRobotsActionTypes.REQUEST_ROBOTS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                robotsData: action.payload,\r\n                isPending: false\r\n            }\r\n        case requestRobotsActionTypes.REQUEST_ROBOTS_FAILED:\r\n            return {\r\n                ...state,\r\n                errorMessage: action.payload\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n","import { combineReducers } from 'redux';\r\n\r\nimport { searchFieldReducer } from './searchField/searchField.reducer';\r\n\r\nimport { robotsReducer } from './requestRobots/requestRobots.reducer';\r\n\r\nconst rootReducer = combineReducers(\r\n    {\r\n        search: searchFieldReducer,\r\n        robots: robotsReducer\r\n    }\r\n);\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\r\n\r\nimport thunk from 'redux-thunk';\r\n\r\nimport  logger  from 'redux-logger';\r\n\r\nimport rootReducer from './root-reducer';\r\n\r\nconst middleWares = [logger, thunk];\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middleWares));\r\n\r\nexport default store;\r\n\r\n","import { requestRobotsActionTypes } from './requestRobots.types';\r\n\r\nexport const robotsIsPending = () => (\r\n    {\r\n        type: requestRobotsActionTypes.REQUEST_ROBOTS_PENDING\r\n    }\r\n);\r\n\r\nexport const robotsSuccess = ( data ) => (\r\n    {\r\n        type: requestRobotsActionTypes.REQUEST_ROBOTS_SUCCESS,\r\n        payload: data\r\n    }\r\n);\r\n\r\nexport const robotsFailed = (errorMessage) => (\r\n    {\r\n        type: requestRobotsActionTypes.REQUEST_ROBOTS_FAILED,\r\n        payload: errorMessage\r\n    }\r\n);\r\n\r\nexport const requestRobotsData = () => (dispatch) => {\r\n    dispatch(robotsIsPending());\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch(robotsSuccess(data)))\r\n        .catch(error => dispatch(robotsFailed(error.message)))\r\n}","import {createSelector} from 'reselect';\r\n\r\nconst selectSearch = state => state.search;\r\n\r\nexport const selectSearchField = createSelector(\r\n    [selectSearch],\r\n    (search) => search.searchField\r\n);","import {createSelector} from 'reselect';\r\n\r\nconst selectRobots  = state => state.robots;\r\n\r\nexport const selectRobotsPending = createSelector(\r\n    [selectRobots],\r\n    (robots) => robots.isPending\r\n);\r\n\r\nexport const selectRobotsSuccess = createSelector(\r\n    [selectRobots],\r\n    (robots) => robots.robotsData \r\n);\r\n\r\nexport const selectRobotsFailed = createSelector(\r\n    [selectRobots],\r\n    (robots) => robots.errorMessage\r\n);\r\n\r\n","import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-2'>\r\n            <img alt='robo' src={`https://robohash.org/${id}?size=200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    return ( \r\n        <div>\r\n            { \r\n                robots.map((user, i) => {\r\n                    return ( \r\n                        <Card \r\n                            key={robots[i].id} \r\n                            id={robots[i].id} \r\n                            name={robots[i].name} \r\n                            email={robots[i].email}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nimport { setSearchField } from '../redux/searchField/searchField.actions';\r\nimport { connect } from 'react-redux';\r\n\r\nconst SearchBox = ({ onSearchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='Search your Friend'\r\n                onChange={onSearchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => (\r\n    {\r\n        onSearchChange: event => dispatch(setSearchField(event.target.value))\r\n    }\r\n);\r\n\r\nexport default connect(null, mapDispatchToProps)(SearchBox);","import { searchFieldActionTypes } from './searchField.types';\r\n\r\nexport const setSearchField = ( text ) => (\r\n    {\r\n        type: searchFieldActionTypes.CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    }\r\n);","import React from 'react';\r\nimport './Scroll.css';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div className='scroll-area'>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render (){\r\n        if(this.state.hasError){\r\n            return <h1>Oooops Something is not working</h1>\r\n        }\r\n        return this.props.children\r\n        \r\n    }\r\n}\r\nexport default ErrorBoundary;","import React, { Component} from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { requestRobotsData } from '../redux/requestRobots/requestRobots.actions';\r\n\r\nimport {createStructuredSelector} from 'reselect';\r\nimport {selectSearchField} from '../redux/searchField/searchField.selectors';\r\nimport {selectRobotsPending, selectRobotsSuccess} from '../redux/requestRobots/requestRobots.selectors';\r\n\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/Searchbox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\n\r\n\r\nclass App extends Component {\r\n  \r\n    componentDidMount(){\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n\r\n    render () {\r\n        const { searchField, isPending, robotsData } = this.props;\r\n        const filteredRobots = robotsData.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n        return isPending ?\r\n            <h1>Loading</h1> :\r\n        (\r\n            <div className='tc'>\r\n                <h1 className='f1'>robo friends</h1>\r\n                <SearchBox/>\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n//standard way\r\n\r\n// const mapStateToProps = state => {\r\n//     return {\r\n//         searchField: state.search.searchField\r\n//     }\r\n// };\r\n\r\n\r\n\r\n// with reselect library\r\nconst mapStateToProps = createStructuredSelector(\r\n    {\r\n        searchField: selectSearchField,\r\n        isPending : selectRobotsPending,\r\n        robotsData: selectRobotsSuccess\r\n    }\r\n);\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onRequestRobots: () => dispatch(requestRobotsData())\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport store from './redux/store';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport './index.css';\r\n\r\nimport App from './containers/App';\r\n\r\nimport 'tachyons';\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}